-- =====================================================
-- AI Capper System Migration
-- =====================================================
-- This migration adds AI enhancement capabilities to the capper system
-- including research runs, capper settings, and AI insights in picks

-- Add AI-related columns to the picks table
ALTER TABLE picks
  ADD COLUMN IF NOT EXISTS ai_insight TEXT,
  ADD COLUMN IF NOT EXISTS ai_research JSONB,
  ADD COLUMN IF NOT EXISTS factors_analyzed JSONB,
  ADD COLUMN IF NOT EXISTS ai_model_version TEXT;

COMMENT ON COLUMN picks.ai_insight IS 'Natural language explanation generated by AI for the pick.';
COMMENT ON COLUMN picks.ai_research IS 'Raw research data and sources used by AI for the pick.';
COMMENT ON COLUMN picks.factors_analyzed IS 'Detailed breakdown of factors considered by AI and their weights.';
COMMENT ON COLUMN picks.ai_model_version IS 'Version of the AI model used to generate this pick.';

-- Create table for AI research runs (for multi-run iterative research)
CREATE TABLE IF NOT EXISTS ai_research_runs (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  game_id UUID REFERENCES games(id) ON DELETE CASCADE,
  capper TEXT NOT NULL, -- 'shiva', 'ifrit', 'cerberus', 'nexus'
  run_number INTEGER NOT NULL, -- 1, 2, or 3
  run_type TEXT NOT NULL, -- 'analytical', 'strategic_validation', 'realtime_validation'
  factors JSONB, -- Factors identified/generated in this run
  statmuse_queries TEXT[], -- StatMuse questions asked in this run
  statmuse_results JSONB, -- StatMuse answers received
  validation_result JSONB, -- Result of validation (only for run 2)
  odds_at_run JSONB, -- Snapshot of odds when this run was executed
  timestamp TIMESTAMPTZ DEFAULT NOW(),
  duration_ms INTEGER, -- Duration of the run in milliseconds

  UNIQUE(game_id, capper, run_number)
);

COMMENT ON TABLE ai_research_runs IS 'Stores iterative AI research runs for each game and capper.';
COMMENT ON COLUMN ai_research_runs.factors IS 'JSONB object containing factors identified or generated during this AI run.';
COMMENT ON COLUMN ai_research_runs.statmuse_queries IS 'Array of StatMuse questions asked during this run.';
COMMENT ON COLUMN ai_research_runs.statmuse_results IS 'JSONB array containing StatMuse Q&A results.';
COMMENT ON COLUMN ai_research_runs.validation_result IS 'JSONB object containing the outcome of the validation step for this run.';
COMMENT ON COLUMN ai_research_runs.odds_at_run IS 'Snapshot of game odds at the time this AI research run was performed.';

-- Create indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_ai_research_runs_game_id ON ai_research_runs(game_id);
CREATE INDEX IF NOT EXISTS idx_ai_research_runs_capper ON ai_research_runs(capper);
CREATE INDEX IF NOT EXISTS idx_ai_research_runs_timestamp ON ai_research_runs(timestamp DESC);

-- Create table for capper settings (for configurable AI behavior)
CREATE TABLE IF NOT EXISTS capper_settings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  capper_name TEXT UNIQUE NOT NULL, -- 'shiva', 'ifrit', 'cerberus', 'nexus'
  ai_provider_run1 TEXT NOT NULL DEFAULT 'perplexity', -- 'perplexity', 'openai', 'local'
  ai_provider_run2 TEXT NOT NULL DEFAULT 'openai', -- 'perplexity', 'openai', 'local'
  ai_model_run1 TEXT, -- e.g., 'sonar-medium-online'
  ai_model_run2 TEXT, -- e.g., 'gpt-4o-mini'
  timing_offset_hours INTEGER NOT NULL DEFAULT 4, -- e.g., 4 hours before game
  timing_offset_nfl_hours INTEGER NOT NULL DEFAULT 24, -- e.g., 24 hours before NFL game
  min_confidence_to_pick DECIMAL(5, 2) NOT NULL DEFAULT 7.0,
  weed_out_filters JSONB, -- JSON array of conditions to halt further AI runs
  factor_weights JSONB, -- Default weights for various factors
  max_statmuse_questions_run1 INTEGER NOT NULL DEFAULT 2,
  max_statmuse_questions_run2 INTEGER NOT NULL DEFAULT 2,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE capper_settings IS 'Configurable settings for each AI-enhanced capper.';
COMMENT ON COLUMN capper_settings.weed_out_filters IS 'JSON array of conditions (e.g., no odds, game already started) to stop further AI processing for a game.';
COMMENT ON COLUMN capper_settings.factor_weights IS 'JSON object defining the default weighting for various factors used in confidence calculation.';

-- Insert default settings for Shiva (AI-enhanced capper)
INSERT INTO capper_settings (
  capper_name,
  ai_provider_run1,
  ai_provider_run2,
  ai_model_run1,
  ai_model_run2,
  timing_offset_hours,
  timing_offset_nfl_hours,
  min_confidence_to_pick,
  weed_out_filters,
  factor_weights,
  max_statmuse_questions_run1,
  max_statmuse_questions_run2
) VALUES (
  'shiva',
  'perplexity',
  'openai',
  'sonar-medium-online',
  'gpt-4o-mini',
  4, -- Run 4 hours before game
  24, -- Run 24 hours before NFL game
  7.0, -- Minimum confidence to generate pick
  '[]'::JSONB, -- No weed-out filters by default
  '{
    "vegas_edge": 0.3,
    "ai_factors": 0.2,
    "consensus": 0.3,
    "recent_form": 0.2
  }'::JSONB,
  2, -- Up to 2 StatMuse questions in Run 1
  2  -- Up to 2 StatMuse questions in Run 2
) ON CONFLICT (capper_name) DO NOTHING;

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_capper_settings_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for updating updated_at
DROP TRIGGER IF EXISTS update_capper_settings_updated_at_trigger ON capper_settings;
CREATE TRIGGER update_capper_settings_updated_at_trigger
  BEFORE UPDATE ON capper_settings
  FOR EACH ROW
  EXECUTE FUNCTION update_capper_settings_updated_at();

-- Add indexes for capper_settings
CREATE INDEX IF NOT EXISTS idx_capper_settings_capper_name ON capper_settings(capper_name);

COMMIT;
